import { notifications } from "@mantine/notifications";
import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import axios from "axios";
import { Keys } from "../Arch/keys";
import { BackendBaseUrl } from "../Arch/Urls";
import { Building } from "../Models/Building";
import { RentContract } from "../Models/RentContract";
import { Room } from "../Models/Room";
import { User } from "../Models/User";
import { RootState } from "../Store";

export interface RentContractState{
    rentContracts: RentContract[],
    ownContracts: RentContract[],
    status: 'idle' | 'loading' | 'failed'
}

const initialState : RentContractState = {
    rentContracts: [],
    ownContracts: [],
    status: 'idle'
}

export const createRentContractAsync = createAsyncThunk(
    'createRentContractAsync',
    async ({itemId,contractType, rentUserId, contractorId, expires} : {itemId : string, contractType: string, rentUserId : string, contractorId: string, expires: Date}) => {
        const createRentContractUrl = BackendBaseUrl + "/rentContract/create"
        const data = await axios.post(
            createRentContractUrl,
            {
                itemId : itemId,
                contractType: contractType,
                rentUserId : rentUserId,
                contractorId : contractorId,
                expires: expires
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return data
    }
);

export const endRentContractAsync = createAsyncThunk(
    'endRentContractAsync',
    async (itemId: string) => {
        const endRentContractUrl = BackendBaseUrl + "/rentContract/end"
        const data = await axios.post(
            endRentContractUrl,
            {
                itemId : itemId
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return data
    }
);

export const getAllRentContractsAsync = createAsyncThunk(
    'getAllRentContractsAsync',
    async () => {
        const getAllRentContractsUrl = BackendBaseUrl + "/rentContract/all"
        const data = await axios.get(
            getAllRentContractsUrl,
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {rentContracts: data.data.rentContracts}
    }
);

export const getOwnRentContractsAsync = createAsyncThunk(
    'getOwnRentContractsAsync',
    async () => {
        const getOwnRentContractsUrl = BackendBaseUrl + "/rentContract/own"
        const data = await axios.get(
            getOwnRentContractsUrl,
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {rentContracts: data.data.rentContracts}
    }
);

export const rentContractsSlice = createSlice({
    name: 'roomsSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        //createRentContractAsync
        builder
            .addCase(createRentContractAsync.pending, (state, action) => {
                console.log("createRentContractAsync is loading")
            })
            .addCase(createRentContractAsync.fulfilled, (state, action) => {
                console.log("createRentContractAsync is fulfilled")
                notifications.show({
                    title: action.payload.data.success ? "Success" : "Error",
                    message: action.payload.data.message,
                })
                console.log(action.payload)
            })
            .addCase(createRentContractAsync.rejected, (state, {error}) => {
                console.log("createRentContractAsync is rejected")
                //notifications.show({
                //    title: 'Rent Contract couldnt be created',
                //    message: error.message,
                //})
            });

        //endRentContractAsync
        builder
            .addCase(endRentContractAsync.pending, (state, action) => {
                console.log("endRentContractAsync is loading")
            })
            .addCase(endRentContractAsync.fulfilled, (state, action) => {
                console.log("endRentContractAsync is fulfilled")
                notifications.show({
                    title: 'Rent Contract succesfully deleted',
                    message: '',
                })
                console.log(action.payload)
            })
            .addCase(endRentContractAsync.rejected, (state, {error}) => {
                console.log("endRentContractAsync is rejected")
                notifications.show({
                    title: 'Rent Contract couldnt be deleted',
                    message: '',
                })
            });


        //getAllRentContractsAsync
        builder
            .addCase(getAllRentContractsAsync.pending, (state, action) => {
                console.log("getAllRentContractsAsync is loading")
            })
            .addCase(getAllRentContractsAsync.fulfilled, (state, action) => {
                console.log("getAllRentContractsAsync is fulfilled")
                console.log(action.payload)
                state.rentContracts = action.payload.rentContracts
            })
            .addCase(getAllRentContractsAsync.rejected, (state, {error}) => {
                console.log("getAllRentContractsAsync is rejected")
            });

        //getOwnRentContractsAsync
        builder
            .addCase(getOwnRentContractsAsync.pending, (state, action) => {
                console.log("getOwnRentContractsAsync is loading")

            })
            .addCase(getOwnRentContractsAsync.fulfilled, (state, action) => {
                console.log("getOwnRentContractsAsync is fulfilled")

                console.log(action.payload.rentContracts)
                state.ownContracts = action.payload.rentContracts
            })
            .addCase(getOwnRentContractsAsync.rejected, (state, {error}) => {
                console.log("getOwnRentContractsAsync is rejected")
            });
    },
});

export const {  } = rentContractsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRentContracts = (state: RootState) => state.rentContracts;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default rentContractsSlice.reducer;