import { notifications } from "@mantine/notifications";
import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import axios from "axios";
import { Keys } from "../Arch/keys";
import { BackendBaseUrl } from "../Arch/Urls";
import { Building } from "../Models/Building";
import { RentContract } from "../Models/RentContract";
import { Room } from "../Models/Room";
import { User } from "../Models/User";
import { RootState } from "../Store";

export interface RentContractState{
    historyContracts: RentContract[],
    status: 'idle' | 'loading' | 'failed'
}

const initialState : RentContractState = {
    historyContracts: [],
    status: 'idle'
}


export const getAllHistoryContractsAsync = createAsyncThunk(
    'getAllHistoryContractsAsync',
    async () => {
        const getAllRentContractsUrl = BackendBaseUrl + "/historyContract/all"
        const data = await axios.get(
            getAllRentContractsUrl,
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {historyContracts: data.data.historyContracts}
    }
);

export const historyContractsSlice = createSlice({
    name: 'historyContractsSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

        //getAllRentContractsAsync
        builder
            .addCase(getAllHistoryContractsAsync.pending, (state, action) => {
                console.log("getAllHistoryContractsAsync is loading")

            })
            .addCase(getAllHistoryContractsAsync.fulfilled, (state, action) => {
                console.log("getAllHistoryContractsAsync is fulfilled")
                console.log(action.payload)
                state.historyContracts = action.payload.historyContracts
            })
            .addCase(getAllHistoryContractsAsync.rejected, (state, {error}) => {
                console.log("getAllHistoryContractsAsync is rejected")
            });
    },
});

export const {  } = historyContractsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectHistoryContracts = (state: RootState) => state.historyContracts;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default historyContractsSlice.reducer;