import { User } from "../Models/User"

import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import { BackendBaseUrl } from "../Arch/Urls";
import axios from "axios";
import { RootState } from "../Store";
import { Keys } from "../Arch/keys";
import { notifications } from "@mantine/notifications";
export interface AccountState{
    loggedIn: boolean
    userProfile: User | null
    errorText: string | undefined
    status: 'idle' | 'loading' | 'failed'
}

const initialState : AccountState = {
    loggedIn : false,
    userProfile : null,
    errorText: undefined,
    status: 'idle'
}

export const signInAsync = createAsyncThunk(
    'login',
    async ({email , password} : {email : string, password: string}) => {
        const SignInURL = BackendBaseUrl + "/login"
        const data = await axios.post(
            SignInURL,
            {
                email: email,
                password: password
            },
            {
                withCredentials: true
            }
        )
        console.log(data)
        return {token: data.data.token, message: data.data.message, user: data.data.user}
    }
);

export const registerAsync = createAsyncThunk(
    'register',
    async ({username, email , password} : {username: string, email : string, password: string}) => {
        const SignInURL = BackendBaseUrl + "/signup"
        const data = await axios.post(
            SignInURL,
            {
                username: username,
                email: email,
                password: password
            },
            {
                withCredentials: true
            }
        )
        console.log(data)
        return {token: data.data.token, message: data.data.message, user: data.data.user}
    }
);

export const verifyAsync = createAsyncThunk(
    'verify',
    async () => {
        if(window.localStorage.getItem(Keys.Access_token) != "" && window.localStorage.getItem(Keys.Access_token)!= undefined){
            const data = await axios.post(
                BackendBaseUrl + "/",
                {
                },
                {
                    headers: {
                        token: window.localStorage.getItem(Keys.Access_token)
                    },
                    withCredentials: true
                }
            )
            console.log("data")
            return data
        }
    }
);
export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        resetError: (state) => {
            state.status = "idle";
        },
        logout: (state) => {
            window.localStorage.setItem(Keys.Access_token, "");
            state.loggedIn = false
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

        //login
        builder
            .addCase(signInAsync.pending, (state, action) => {
                console.log("login is loading")
                state.status = 'loading';
            })
            .addCase(signInAsync.fulfilled, (state, action) => {
                console.log(action.payload)
                if(action.payload.token != undefined){
                    console.log("login is fullfilled")
                    window.localStorage.setItem(Keys.Access_token, action.payload.token);
                    state.loggedIn = true
                    state.userProfile = action.payload.user
                    state.status = "idle"
                }
                if(action.payload.token == undefined){
                    state.status = 'failed'
                    state.errorText = action.payload.message
                    console.log(action.payload.message)
                }

            })
            .addCase(signInAsync.rejected, (state, {error}) => {
                console.log("login is failed")
                console.log(error)
                state.errorText = error.message

                state.status = 'failed';
            });

        //registerAsync
        builder
            .addCase(registerAsync.pending, (state, action) => {
                console.log("registerAsync is loading")
                state.status = 'loading';
            })
            .addCase(registerAsync.fulfilled, (state, action) => {
                console.log(action.payload)
                notifications.show({
                    title: "Whutsup?",
                    message: action.payload.message,
                })
                if(action.payload.token != undefined){
                    console.log("registerAsync is fullfilled")
                    window.localStorage.setItem(Keys.Access_token, action.payload.token);
                    state.loggedIn = true
                    state.userProfile = action.payload.user
                    state.status = "idle"
                }
                if(action.payload.token == undefined){
                    state.status = 'failed'
                    state.errorText = action.payload.message
                    console.log(action.payload.message)
                }

            })
            .addCase(registerAsync.rejected, (state, {error}) => {
                console.log("registerAsync is failed")
                console.log(error)
                state.errorText = error.message

                state.status = 'failed';
            });

        //verifyAsync
        builder
            .addCase(verifyAsync.pending, (state, action) => {
                console.log("verifyUser is loading")
                state.status = 'loading';
            })
            .addCase(verifyAsync.fulfilled, (state, action) => {
                console.log(action.payload)
                state.status = "idle"
                if(action.payload){
                    if(action.payload.data.status == true){
                        state.loggedIn = true
                        state.userProfile = action.payload.data.user
                    }
                    
                }
            })
            .addCase(verifyAsync.rejected, (state, {error}) => {
                console.log("verifyUser is failed")
                console.log(error)
                state.errorText = error.message

                state.status = 'failed';
            });

        
    },
});

export const { resetError, logout } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer;