import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import axios from "axios";
import { Keys } from "../Arch/keys";
import { BackendBaseUrl } from "../Arch/Urls";
import { Building } from "../Models/Building";
import { Room } from "../Models/Room";
import { Shelf } from "../Models/Shelf";
import { User } from "../Models/User";
import { RootState } from "../Store";

export interface ShelfState{
    shelfs: Shelf[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState : ShelfState = {
    shelfs: [],
    status: 'idle'
}

export const createShelfAsync = createAsyncThunk(
    'createShelfAsync',
    async ({name, roomId}:{name: string, roomId: string}) => {
        const createShelfAsyncUrl = BackendBaseUrl + "/shelf/create"
        const data = await axios.post(
            createShelfAsyncUrl,
            {
                name : name,
                roomId: roomId
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {shelf: data.data.shelf}
    }
);

export const printShelfAsync = createAsyncThunk(
    'printShelfAsync',
    async ({ shelfId }: { shelfId: string}) => {

        const printItemAsyncUrl = BackendBaseUrl + "/shelf/print";
        

        const data = await axios.post(
            printItemAsyncUrl,
            {shelfId: shelfId},
            {
                headers: {
                    'Content-Type': 'application/json', // Set content type to multipart/form-data
                    'token': window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        );
        console.log(data);
        return data;
    }
);
export const deleteShelfAsync = createAsyncThunk(
    'deleteShelfAsync',
    async ( shelfId: string ) => {
        const deleteShelfAsyncUrl = BackendBaseUrl + "/shelf/delete"
        const data = await axios.post(
            deleteShelfAsyncUrl,
            {
                shelfId : shelfId
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return data
    }
);





export const shelfSlice = createSlice({
    name: 'shelfSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        //getUsersAsync
        builder
            .addCase(createShelfAsync.pending, (state, action) => {
                console.log("createShelfAsync is loading")
            })
            .addCase(createShelfAsync.fulfilled, (state, action) => {
                console.log("createShelfAsync is fulfilled")
                console.log(action.payload)
            })
            .addCase(createShelfAsync.rejected, (state, {error}) => {
                console.log("createShelfAsync is rejected")
            });

        //getUsersAsync
        builder
            .addCase(printShelfAsync.pending, (state, action) => {
                console.log("createShelfAsync is loading")
            })
            .addCase(printShelfAsync.fulfilled, (state, action) => {
                console.log("createShelfAsync is fulfilled")
                console.log(action.payload)
            })
            .addCase(printShelfAsync.rejected, (state, {error}) => {
                console.log("createShelfAsync is rejected")
            });

        //deleteShelfAsync
        builder
            .addCase(deleteShelfAsync.pending, (state, action) => {
                console.log("deleteShelfAsync is loading")
            })
            .addCase(deleteShelfAsync.fulfilled, (state, action) => {
                console.log("deleteShelfAsync is fulfilled")
                console.log(action.payload)
            })
            .addCase(deleteShelfAsync.rejected, (state, {error}) => {
                console.log("deleteShelfAsync is rejected")
            });
    },
});

export const {  } = shelfSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectShelfs = (state: RootState) => state.shelfs;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default shelfSlice.reducer;