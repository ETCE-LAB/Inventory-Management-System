import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import axios from "axios";
import { Keys } from "../Arch/keys";
import { BackendBaseUrl } from "../Arch/Urls";
import { Building } from "../Models/Building";
import { Project } from "../Models/Project";
import { Room } from "../Models/Room";
import { Shelf } from "../Models/Shelf";
import { User } from "../Models/User";
import { RootState } from "../Store";

export interface ProjectState{
    projects: Project[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState : ProjectState = {
    projects: [],
    status: 'idle'
}

export const createProjectAsync = createAsyncThunk(
    'createProjectAsync',
    async ({name, ownerId, description}:{name: string, ownerId: string, description: string}) => {
        const createShelfAsyncUrl = BackendBaseUrl + "/project/create"
        const data = await axios.post(
            createShelfAsyncUrl,
            {
                name : name,
                ownerId: ownerId,
                description: description
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {project: data.data.project}
    }
);

export const getProjectsAsync = createAsyncThunk(
    'getProjectsAsync',
    async () => {
        const getProjectsAsyncUrl = BackendBaseUrl + "/project/all"
        const data = await axios.get(
            getProjectsAsyncUrl,
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                }
            }
        )
        console.log(data)
        return {projects: data.data.projects}
    }
);

//export const deleteShelfAsync = createAsyncThunk(
//    'deleteShelfAsync',
//    async ( shelfId: string ) => {
//        const deleteShelfAsyncUrl = BackendBaseUrl + "/shelf/delete"
//        const data = await axios.post(
//            deleteShelfAsyncUrl,
//            {
//                shelfId : shelfId
//            },
//            {
//                headers: {
//                    token: window.localStorage.getItem(Keys.Access_token)
//                },
//                withCredentials: true
//            }
//        )
//        console.log(data)
//        return data
//    }
//);





export const projectSlice = createSlice({
    name: 'projectSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        //getUsersAsync
        builder
            .addCase(createProjectAsync.pending, (state, action) => {
                console.log("createProjectAsync is loading")
            })
            .addCase(createProjectAsync.fulfilled, (state, action) => {
                console.log("createProjectAsync is fulfilled")
                console.log(action.payload)
            })
            .addCase(createProjectAsync.rejected, (state, {error}) => {
                console.log("createProjectAsync is rejected")
            });

        //getUsersAsync
        builder
            .addCase(getProjectsAsync.pending, (state, action) => {
                console.log("createProjectAsync is loading")
            })
            .addCase(getProjectsAsync.fulfilled, (state, action) => {
                console.log("createProjectAsync is fulfilled")
                state.projects = action.payload.projects
                console.log(action.payload)
            })
            .addCase(getProjectsAsync.rejected, (state, {error}) => {
                console.log("createProjectAsync is rejected")
            });
        //deleteShelfAsync
        //builder
        //    .addCase(deleteShelfAsync.pending, (state, action) => {
        //        console.log("deleteShelfAsync is loading")
        //    })
        //    .addCase(deleteShelfAsync.fulfilled, (state, action) => {
        //        console.log("deleteShelfAsync is fulfilled")
        //        console.log(action.payload)
        //    })
        //    .addCase(deleteShelfAsync.rejected, (state, {error}) => {
        //        console.log("deleteShelfAsync is rejected")
        //    });
    },
});

export const {  } = projectSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProjects = (state: RootState) => state.projects;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default projectSlice.reducer;