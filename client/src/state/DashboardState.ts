import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import { RootState } from "../Store";

export interface DashboardState{
    selectedPage: number
    status: 'idle' | 'loading' | 'failed'
}

const initialState : DashboardState = {
    selectedPage : 1,
    status: 'idle'
}

export const dashboardSlice = createSlice({
    name: 'dashboard',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setSelectedPage: (state, action) => {
            state.selectedPage = action.payload
            state.status = "idle";
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

    },
});

export const { setSelectedPage } = dashboardSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDashboard = (state: RootState) => state.dashboard;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default dashboardSlice.reducer;