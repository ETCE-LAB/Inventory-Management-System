import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import axios from "axios";
import { Keys } from "../Arch/keys";
import { BackendBaseUrl } from "../Arch/Urls";
import { User } from "../Models/User";
import { RootState } from "../Store";

export interface AccountsState{
    accounts: User[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState : AccountsState = {
    accounts : [],
    status: 'idle'
}

export const getUsersAsync = createAsyncThunk(
    'getUsersAsync',
    async () => {
        const getUsersUrl = BackendBaseUrl + "/user/all"
        const data = await axios.get(
            getUsersUrl,
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {users: data.data.users}
    }
);

export const promoteUserAsync = createAsyncThunk(
    'promoteUserAsync',
    async (promotionId: string) => {
        const promoteUserUrl = BackendBaseUrl + "/user/promote"
        const data = await axios.post(
            promoteUserUrl,
            {
                promotionId : promotionId
            },
            {
                headers: {
                    token: window.localStorage.getItem(Keys.Access_token)
                },
                withCredentials: true
            }
        )
        console.log(data)
        return {user: data.data.user}
    }
);


export function filterAccountsHelper(inputString: string, users: User[]): User[] {
    const filteredAccounts : User[] = []
    for (const user of users) {
        if (user.email.includes(inputString) || user.username.includes(inputString)) {
            filteredAccounts.push(user)
        }
    }
    return filteredAccounts;
}
export const accountsSlice = createSlice({
    name: 'accounts',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        //getUsersAsync
        builder
            .addCase(getUsersAsync.pending, (state, action) => {
                console.log("getUsersAsync is loading")
                state.status = 'loading';
            })
            .addCase(getUsersAsync.fulfilled, (state, action) => {
                console.log(action.payload)
                console.log("getUsersAsync is fulfilled")
                state.status = "idle"
                if(action.payload){
                        state.accounts = action.payload.users
                }
            })
            .addCase(getUsersAsync.rejected, (state, {error}) => {
                console.log("getUsersAsync is failed")
                console.log(error)
                state.status = 'failed';
            });

        //promoteUserAsync
        builder
            .addCase(promoteUserAsync.pending, (state, action) => {
                console.log("promoteUserAsync is loading")
                state.status = 'loading';
            })
            .addCase(promoteUserAsync.fulfilled, (state, action) => {
                console.log(action.payload)
                console.log("promoteUserAsync is fulfilled")
                state.status = "idle"

                if(action.payload){
                    const insertNewUserAccounts : User[] = []
                    for (const user of state.accounts){
                        if(user._id == action.payload.user._id){
                            insertNewUserAccounts.push(action.payload.user)
                        }else{insertNewUserAccounts.push(user)}
                    }
                    state.accounts = insertNewUserAccounts
                }
            })
            .addCase(promoteUserAsync.rejected, (state, {error}) => {
                console.log("promoteUserAsync is failed")
                console.log(error)
                state.status = 'failed';
            });
    },
});

export const {  } = accountsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAccounts = (state: RootState) => state.accounts;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default accountsSlice.reducer;